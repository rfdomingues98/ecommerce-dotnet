services:
  # Infrastructure services
  kafka:
    image: confluentinc/cp-kafka:latest
    hostname: kafka
    ports:
      - 9092:9092
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_PROCESS_ROLES: "broker,controller"
      KAFKA_CONTROLLER_QUORUM_VOTERS: "1@kafka:29093"
      KAFKA_LISTENERS: PLAINTEXT://kafka:29092,CONTROLLER://kafka:29093,PLAINTEXT_HOST://0.0.0.0:9092
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      CLUSTER_ID: MkU3OEVBNTcwNTJENDM2Qk
    volumes:
      - ./kafka-data:/var/lib/kafka

  schema-registry:
    image: confluentinc/cp-schema-registry:latest
    depends_on:
      - kafka
    hostname: schema-registry
    ports:
      - 8081:8081
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: kafka:29092

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    depends_on:
      - kafka
      - schema-registry
    ports:
      - 8080:8080
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
      KAFKA_CLUSTERS_0_SCHEMAREGISTRY: http://schema-registry:8081

  redis:
    image: redis:alpine
    ports:
      - 6379:6379
    volumes:
      - redis-data:/data
    command: ["redis-server", "--appendonly", "yes"]
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 30s
      retries: 50

  redis-commander:
    image: rediscommander/redis-commander:latest
    environment:
      - REDIS_HOSTS=local:redis:6379
    ports:
      - 8082:8081
    depends_on:
      - redis

  sqlserver:
    image: mcr.microsoft.com/mssql/server:2022-latest
    environment:
      SA_PASSWORD: "StrongPassword123!"
      ACCEPT_EULA: "Y"
      MSSQL_PID: "Developer"
    ports:
      - 1433:1433
    volumes:
      - sqlserver-data:/var/opt/mssql
    healthcheck:
      test: /opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P "StrongPassword123!" -Q "SELECT 1" || exit 1
      interval: 10s
      timeout: 5s
      retries: 10

  # Application services
  inventory-api:
    image: inventory-api:latest
    build:
      context: .
      dockerfile: src/Services/Inventory/Inventory.API/Dockerfile
    depends_on:
      - kafka
      - redis
      - sqlserver
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:80
      - ConnectionStrings__InventoryDB=Server=sqlserver;Database=InventoryDb;User Id=sa;Password=StrongPassword123!;TrustServerCertificate=True
      - Kafka__BootstrapServers=kafka:29092
      - Redis__ConnectionString=redis:6379
    ports:
      - 5101:80
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
  # order-api:
  #   build:
  #     context: .
  #     dockerfile: src/Services/Order/Order.API/Dockerfile
  #   depends_on:
  #     - sqlserver
  #     - kafka
  #     - redis
  #   environment:
  #     - ASPNETCORE_ENVIRONMENT=Development
  #     - ConnectionStrings__OrderDB=Server=sqlserver;Database=OrderDb;User Id=sa;Password=StrongPassword123!;TrustServerCertificate=True
  #     - Kafka__BootstrapServers=kafka:29092
  #     - Redis__ConnectionString=redis:6379
  #   ports:
  #     - "5102:80"
  #   healthcheck:
  #     test: ["CMD", "curl", "-f", "http://localhost:80/health"]
  #     interval: 30s
  #     timeout: 10s
  #     retries: 3
  #     start_period: 40s

  # product-api:
  #   build:
  #     context: .
  #     dockerfile: src/Services/Product/Product.API/Dockerfile
  #   depends_on:
  #     - sqlserver
  #     - kafka
  #     - redis
  #   environment:
  #     - ASPNETCORE_ENVIRONMENT=Development
  #     - ConnectionStrings__ProductDB=Server=sqlserver;Database=ProductDb;User Id=sa;Password=StrongPassword123!;TrustServerCertificate=True
  #     - Kafka__BootstrapServers=kafka:29092
  #     - Redis__ConnectionString=redis:6379
  #   ports:
  #     - "5103:80"
  #   healthcheck:
  #     test: ["CMD", "curl", "-f", "http://localhost:80/health"]
  #     interval: 30s
  #     timeout: 10s
  #     retries: 3
  #     start_period: 40s

  #notification-api:
  #  build:
  #    context: .
  #    dockerfile: src/Services/Notification/Notification.API/Dockerfile
  #  depends_on:
  #    - kafka
  #    - redis
  #  environment:
  #    - ASPNETCORE_ENVIRONMENT=Development
  #    - Kafka__BootstrapServers=kafka:29092
  #    - Redis__ConnectionString=redis:6379
  #  ports:
  #    - "5104:80"
  #  healthcheck:
  #    test: ["CMD", "curl", "-f", "http://localhost:80/health"]
  #    interval: 30s
  #    timeout: 10s
  #    retries: 3
  #    start_period: 40s

volumes:
  kafka-data:
  redis-data:
  sqlserver-data:
